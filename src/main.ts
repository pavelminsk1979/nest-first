import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

/*тут точка входа в приложение
тут происходит настройка и запуск приложения

документация nest
https://docs.nestjs.com/*/
async function bootstrap() {
  /*  класс создает приложение на основе МОДУЛЯ
   NestFactory.create(AppModule) - Эта строка кода создает экземпляр
    приложения NestJS на основе модуля AppModule. AppModule - это корневой
     модуль вашего приложения, который определяет все импорты, контроллеры
      и провайдеры, необходимые для функционирования вашего приложения.
       NestFactory - это класс, предоставляемый NestJS, который
        предоставляет статические методы для создания экземпляра
        приложения*/
  const app = await NestFactory.create(AppModule);

  /*  После создания экземпляра приложения, вызывается метод listen(),
   который запускает ваше приложение на указанном порту.
   В данном случае, приложение будет слушать порт 3000.*/
  await app.listen(3000);
}
/*bootstrap() - Эта строка кода вызывает функцию bootstrap(),
 чтобы запустить приложение. Вызов функции bootstrap()
 является точкой входа для вашего приложения NestJS.
  После этого вызова, ваше приложение будет готово
  к прослушиванию и обработке HTTP-запросов.*/
bootstrap();

/*
Когда ваше NestJS-приложение слушает определенный порт (например, порт 3000), это означает, что оно готово принимать входящие HTTP-запросы от клиентов, таких как веб-браузеры или другие приложения.

  Когда вы запускаете запрос с фронтенда, например, с помощью AJAX-запроса или при обновлении страницы в браузере, ваш браузер отправляет HTTP-запрос на указанный URL и порт вашего NestJS-приложения.

  После получения запроса, NestJS-приложение проверяет маршруты и контроллеры, которые были определены в вашем коде. NestJS сопоставляет URL запроса с определенными маршрутами и передает запрос соответствующему контроллеру для обработки.

  В контроллере вашего NestJS-приложения, который соответствует маршруту, определенному для запроса, вы определяете метод, который будет вызываться для обработки этого запроса. В этом методе вы можете выполнять необходимые действия, например, получать данные из базы данных или возвращать данные в качестве ответа на запрос.

  Когда метод контроллера завершает свою работу, NestJS-приложение формирует HTTP-ответ и отправляет его обратно клиенту (в ваш браузер или другое приложение), который сделал запрос.

  Таким образом, когда ваше NestJS-приложение слушает порт, оно ожидает входящие HTTP-запросы и обрабатывает их с помощью контроллеров и сервисов, определенных в вашем коде. После обработки запроса, приложение отправляет HTTP-ответ назад клиенту.*/
